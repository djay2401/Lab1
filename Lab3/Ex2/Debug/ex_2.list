
ex_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e0  080028e0  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080028e0  080028e0  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028e0  080028e0  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080028e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000050  08002938  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002938  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b6b  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c66  00000000  00000000  00029be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170db  00000000  00000000  0002cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c827  00000000  00000000  00043d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826c1  00000000  00000000  00050572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2c33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002968  00000000  00000000  000d2c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	080028a4 	.word	0x080028a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	080028a4 	.word	0x080028a4

0800014c <fsm_automatic_run>:


#include "fsm_automatic.h"


void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4b9c      	ldr	r3, [pc, #624]	; (80003c4 <fsm_automatic_run+0x278>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b04      	cmp	r3, #4
 8000158:	f200 819f 	bhi.w	800049a <fsm_automatic_run+0x34e>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	080001df 	.word	0x080001df
 800016c:	0800027f 	.word	0x0800027f
 8000170:	08000327 	.word	0x08000327
 8000174:	080003f5 	.word	0x080003f5
	/*in INIT status, it status is assigned AUTO_RED_GREEN
	assign timeRed, timeGreen, timeYellow
	tempRed, tempYellow, tempGreen to corresponding value
	*/
	case INIT:
		status = AUTO_RED_GREEN;
 8000178:	4b92      	ldr	r3, [pc, #584]	; (80003c4 <fsm_automatic_run+0x278>)
 800017a:	2202      	movs	r2, #2
 800017c:	601a      	str	r2, [r3, #0]
		setTimer1(defaultTimeGreen*1000);
 800017e:	4b92      	ldr	r3, [pc, #584]	; (80003c8 <fsm_automatic_run+0x27c>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000186:	fb02 f303 	mul.w	r3, r2, r3
 800018a:	4618      	mov	r0, r3
 800018c:	f000 fe3a 	bl	8000e04 <setTimer1>
		timeRed = defaultTimeRed;
 8000190:	4b8e      	ldr	r3, [pc, #568]	; (80003cc <fsm_automatic_run+0x280>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a8e      	ldr	r2, [pc, #568]	; (80003d0 <fsm_automatic_run+0x284>)
 8000196:	6013      	str	r3, [r2, #0]
		timeGreen = defaultTimeGreen;
 8000198:	4b8b      	ldr	r3, [pc, #556]	; (80003c8 <fsm_automatic_run+0x27c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a8d      	ldr	r2, [pc, #564]	; (80003d4 <fsm_automatic_run+0x288>)
 800019e:	6013      	str	r3, [r2, #0]
		tempRed = defaultTimeRed;
 80001a0:	4b8a      	ldr	r3, [pc, #552]	; (80003cc <fsm_automatic_run+0x280>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a8c      	ldr	r2, [pc, #560]	; (80003d8 <fsm_automatic_run+0x28c>)
 80001a6:	6013      	str	r3, [r2, #0]
		tempYellow = defaultTimeYellow;
 80001a8:	4b8c      	ldr	r3, [pc, #560]	; (80003dc <fsm_automatic_run+0x290>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a8c      	ldr	r2, [pc, #560]	; (80003e0 <fsm_automatic_run+0x294>)
 80001ae:	6013      	str	r3, [r2, #0]
		tempGreen = defaultTimeGreen;
 80001b0:	4b85      	ldr	r3, [pc, #532]	; (80003c8 <fsm_automatic_run+0x27c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a8b      	ldr	r2, [pc, #556]	; (80003e4 <fsm_automatic_run+0x298>)
 80001b6:	6013      	str	r3, [r2, #0]
		setTimer2(1000);
 80001b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001bc:	f000 fe3e 	bl	8000e3c <setTimer2>
		updateClockBuffer(timeRed--, timeGreen--);
 80001c0:	4b83      	ldr	r3, [pc, #524]	; (80003d0 <fsm_automatic_run+0x284>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	1e5a      	subs	r2, r3, #1
 80001c6:	4982      	ldr	r1, [pc, #520]	; (80003d0 <fsm_automatic_run+0x284>)
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	4a82      	ldr	r2, [pc, #520]	; (80003d4 <fsm_automatic_run+0x288>)
 80001cc:	6812      	ldr	r2, [r2, #0]
 80001ce:	1e51      	subs	r1, r2, #1
 80001d0:	4880      	ldr	r0, [pc, #512]	; (80003d4 <fsm_automatic_run+0x288>)
 80001d2:	6001      	str	r1, [r0, #0]
 80001d4:	4611      	mov	r1, r2
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fc38 	bl	8000a4c <updateClockBuffer>
		break;
 80001dc:	e166      	b.n	80004ac <fsm_automatic_run+0x360>
	 * and call updateClockBuffer to update value is displayed in led 7 Segment
	 * with parameter is timeRed-- and timeYellow--
	 * if timer2_flag = 1, update and decrease timeRed and timeGreen
	 * if is_button_pressed(0) = 1, move to MAN_MODE2
	 */
		setTrafficRed();
 80001de:	f000 ff35 	bl	800104c <setTrafficRed>
		setTrafficGreen1();
 80001e2:	f000 ff8b 	bl	80010fc <setTrafficGreen1>

		if(timer1_flag == 1){
 80001e6:	4b80      	ldr	r3, [pc, #512]	; (80003e8 <fsm_automatic_run+0x29c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d121      	bne.n	8000232 <fsm_automatic_run+0xe6>
			status = AUTO_RED_YELLOW;
 80001ee:	4b75      	ldr	r3, [pc, #468]	; (80003c4 <fsm_automatic_run+0x278>)
 80001f0:	2203      	movs	r2, #3
 80001f2:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeYellow*1000);
 80001f4:	4b79      	ldr	r3, [pc, #484]	; (80003dc <fsm_automatic_run+0x290>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001fc:	fb02 f303 	mul.w	r3, r2, r3
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fdff 	bl	8000e04 <setTimer1>
			timeYellow = defaultTimeYellow;
 8000206:	4b75      	ldr	r3, [pc, #468]	; (80003dc <fsm_automatic_run+0x290>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a78      	ldr	r2, [pc, #480]	; (80003ec <fsm_automatic_run+0x2a0>)
 800020c:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRed--, timeYellow--);
 800020e:	4b70      	ldr	r3, [pc, #448]	; (80003d0 <fsm_automatic_run+0x284>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	1e5a      	subs	r2, r3, #1
 8000214:	496e      	ldr	r1, [pc, #440]	; (80003d0 <fsm_automatic_run+0x284>)
 8000216:	600a      	str	r2, [r1, #0]
 8000218:	4a74      	ldr	r2, [pc, #464]	; (80003ec <fsm_automatic_run+0x2a0>)
 800021a:	6812      	ldr	r2, [r2, #0]
 800021c:	1e51      	subs	r1, r2, #1
 800021e:	4873      	ldr	r0, [pc, #460]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000220:	6001      	str	r1, [r0, #0]
 8000222:	4611      	mov	r1, r2
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fc11 	bl	8000a4c <updateClockBuffer>
			setTimer2(1000);
 800022a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022e:	f000 fe05 	bl	8000e3c <setTimer2>
		}
		if(timer2_flag == 1){
 8000232:	4b6f      	ldr	r3, [pc, #444]	; (80003f0 <fsm_automatic_run+0x2a4>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d111      	bne.n	800025e <fsm_automatic_run+0x112>
			updateClockBuffer(timeRed--, timeGreen--);
 800023a:	4b65      	ldr	r3, [pc, #404]	; (80003d0 <fsm_automatic_run+0x284>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	1e5a      	subs	r2, r3, #1
 8000240:	4963      	ldr	r1, [pc, #396]	; (80003d0 <fsm_automatic_run+0x284>)
 8000242:	600a      	str	r2, [r1, #0]
 8000244:	4a63      	ldr	r2, [pc, #396]	; (80003d4 <fsm_automatic_run+0x288>)
 8000246:	6812      	ldr	r2, [r2, #0]
 8000248:	1e51      	subs	r1, r2, #1
 800024a:	4862      	ldr	r0, [pc, #392]	; (80003d4 <fsm_automatic_run+0x288>)
 800024c:	6001      	str	r1, [r0, #0]
 800024e:	4611      	mov	r1, r2
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fbfb 	bl	8000a4c <updateClockBuffer>
			setTimer2(1000);
 8000256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025a:	f000 fdef 	bl	8000e3c <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 800025e:	2000      	movs	r0, #0
 8000260:	f000 fbb4 	bl	80009cc <is_button_pressed>
 8000264:	4603      	mov	r3, r0
 8000266:	2b01      	cmp	r3, #1
 8000268:	f040 8119 	bne.w	800049e <fsm_automatic_run+0x352>
			setTimer1(250);
 800026c:	20fa      	movs	r0, #250	; 0xfa
 800026e:	f000 fdc9 	bl	8000e04 <setTimer1>
			status = MAN_MODE2;
 8000272:	4b54      	ldr	r3, [pc, #336]	; (80003c4 <fsm_automatic_run+0x278>)
 8000274:	220b      	movs	r2, #11
 8000276:	601a      	str	r2, [r3, #0]
			setTrafficRedBlink();
 8000278:	f000 ff6c 	bl	8001154 <setTrafficRedBlink>

		}
		break;
 800027c:	e10f      	b.n	800049e <fsm_automatic_run+0x352>
		 * and call updateClockBuffer to update value is displayed in led 7 Segment
		 * with parameter is timeGreen-- and timeRed--
		 * if timer2_flag = 1, update and decrease timeRed and timeYelow
		 * if is_button_pressed(0) = 1, move to MAN_MODE2
		 */
		setTrafficRed();
 800027e:	f000 fee5 	bl	800104c <setTrafficRed>
		setTrafficYellow1();
 8000282:	f000 ff51 	bl	8001128 <setTrafficYellow1>

		if(timer1_flag == 1){
 8000286:	4b58      	ldr	r3, [pc, #352]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d125      	bne.n	80002da <fsm_automatic_run+0x18e>
			status = AUTO_GREEN_RED;
 800028e:	4b4d      	ldr	r3, [pc, #308]	; (80003c4 <fsm_automatic_run+0x278>)
 8000290:	2204      	movs	r2, #4
 8000292:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 8000294:	4b4c      	ldr	r3, [pc, #304]	; (80003c8 <fsm_automatic_run+0x27c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800029c:	fb02 f303 	mul.w	r3, r2, r3
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fdaf 	bl	8000e04 <setTimer1>
			timeGreen = defaultTimeGreen;
 80002a6:	4b48      	ldr	r3, [pc, #288]	; (80003c8 <fsm_automatic_run+0x27c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a4a      	ldr	r2, [pc, #296]	; (80003d4 <fsm_automatic_run+0x288>)
 80002ac:	6013      	str	r3, [r2, #0]
			timeRed = defaultTimeRed;
 80002ae:	4b47      	ldr	r3, [pc, #284]	; (80003cc <fsm_automatic_run+0x280>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a47      	ldr	r2, [pc, #284]	; (80003d0 <fsm_automatic_run+0x284>)
 80002b4:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeGreen--, timeRed--);
 80002b6:	4b47      	ldr	r3, [pc, #284]	; (80003d4 <fsm_automatic_run+0x288>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	4945      	ldr	r1, [pc, #276]	; (80003d4 <fsm_automatic_run+0x288>)
 80002be:	600a      	str	r2, [r1, #0]
 80002c0:	4a43      	ldr	r2, [pc, #268]	; (80003d0 <fsm_automatic_run+0x284>)
 80002c2:	6812      	ldr	r2, [r2, #0]
 80002c4:	1e51      	subs	r1, r2, #1
 80002c6:	4842      	ldr	r0, [pc, #264]	; (80003d0 <fsm_automatic_run+0x284>)
 80002c8:	6001      	str	r1, [r0, #0]
 80002ca:	4611      	mov	r1, r2
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fbbd 	bl	8000a4c <updateClockBuffer>
			setTimer2(1000);
 80002d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d6:	f000 fdb1 	bl	8000e3c <setTimer2>
		}
		if(timer2_flag == 1){
 80002da:	4b45      	ldr	r3, [pc, #276]	; (80003f0 <fsm_automatic_run+0x2a4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d111      	bne.n	8000306 <fsm_automatic_run+0x1ba>
			updateClockBuffer(timeRed--, timeYellow--);
 80002e2:	4b3b      	ldr	r3, [pc, #236]	; (80003d0 <fsm_automatic_run+0x284>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	1e5a      	subs	r2, r3, #1
 80002e8:	4939      	ldr	r1, [pc, #228]	; (80003d0 <fsm_automatic_run+0x284>)
 80002ea:	600a      	str	r2, [r1, #0]
 80002ec:	4a3f      	ldr	r2, [pc, #252]	; (80003ec <fsm_automatic_run+0x2a0>)
 80002ee:	6812      	ldr	r2, [r2, #0]
 80002f0:	1e51      	subs	r1, r2, #1
 80002f2:	483e      	ldr	r0, [pc, #248]	; (80003ec <fsm_automatic_run+0x2a0>)
 80002f4:	6001      	str	r1, [r0, #0]
 80002f6:	4611      	mov	r1, r2
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fba7 	bl	8000a4c <updateClockBuffer>
			setTimer2(1000);
 80002fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000302:	f000 fd9b 	bl	8000e3c <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 8000306:	2000      	movs	r0, #0
 8000308:	f000 fb60 	bl	80009cc <is_button_pressed>
 800030c:	4603      	mov	r3, r0
 800030e:	2b01      	cmp	r3, #1
 8000310:	f040 80c7 	bne.w	80004a2 <fsm_automatic_run+0x356>
			setTimer1(250);
 8000314:	20fa      	movs	r0, #250	; 0xfa
 8000316:	f000 fd75 	bl	8000e04 <setTimer1>
			status = MAN_MODE2;
 800031a:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <fsm_automatic_run+0x278>)
 800031c:	220b      	movs	r2, #11
 800031e:	601a      	str	r2, [r3, #0]
			setTrafficRedBlink();
 8000320:	f000 ff18 	bl	8001154 <setTrafficRedBlink>
		}
		break;
 8000324:	e0bd      	b.n	80004a2 <fsm_automatic_run+0x356>
		 * and call updateClockBuffer to update value is displayed in led 7 Segment
		 * with parameter is timeYelow-- and timeRed--
		 * if timer2_flag = 1, update and decrease timeGreen and timeRed
		 * if is_button_pressed(0) = 1, move to MAN_MODE2
		 */
		setTrafficGreen();
 8000326:	f000 fea7 	bl	8001078 <setTrafficGreen>
		setTrafficRed1();
 800032a:	f000 fed1 	bl	80010d0 <setTrafficRed1>

		if(timer1_flag == 1){
 800032e:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d121      	bne.n	800037a <fsm_automatic_run+0x22e>
			status = AUTO_YELLOW_RED;
 8000336:	4b23      	ldr	r3, [pc, #140]	; (80003c4 <fsm_automatic_run+0x278>)
 8000338:	2205      	movs	r2, #5
 800033a:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeYellow*1000);
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <fsm_automatic_run+0x290>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fd5b 	bl	8000e04 <setTimer1>
			timeYellow = defaultTimeYellow;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <fsm_automatic_run+0x290>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a26      	ldr	r2, [pc, #152]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000354:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeYellow--, timeRed--);
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1e5a      	subs	r2, r3, #1
 800035c:	4923      	ldr	r1, [pc, #140]	; (80003ec <fsm_automatic_run+0x2a0>)
 800035e:	600a      	str	r2, [r1, #0]
 8000360:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <fsm_automatic_run+0x284>)
 8000362:	6812      	ldr	r2, [r2, #0]
 8000364:	1e51      	subs	r1, r2, #1
 8000366:	481a      	ldr	r0, [pc, #104]	; (80003d0 <fsm_automatic_run+0x284>)
 8000368:	6001      	str	r1, [r0, #0]
 800036a:	4611      	mov	r1, r2
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fb6d 	bl	8000a4c <updateClockBuffer>
			setTimer2(1000);
 8000372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000376:	f000 fd61 	bl	8000e3c <setTimer2>
		}
		if(timer2_flag == 1){
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d111      	bne.n	80003a6 <fsm_automatic_run+0x25a>
			updateClockBuffer(timeGreen--, timeRed--);
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <fsm_automatic_run+0x288>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	1e5a      	subs	r2, r3, #1
 8000388:	4912      	ldr	r1, [pc, #72]	; (80003d4 <fsm_automatic_run+0x288>)
 800038a:	600a      	str	r2, [r1, #0]
 800038c:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <fsm_automatic_run+0x284>)
 800038e:	6812      	ldr	r2, [r2, #0]
 8000390:	1e51      	subs	r1, r2, #1
 8000392:	480f      	ldr	r0, [pc, #60]	; (80003d0 <fsm_automatic_run+0x284>)
 8000394:	6001      	str	r1, [r0, #0]
 8000396:	4611      	mov	r1, r2
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fb57 	bl	8000a4c <updateClockBuffer>
			setTimer2(1000);
 800039e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a2:	f000 fd4b 	bl	8000e3c <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fb10 	bl	80009cc <is_button_pressed>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d179      	bne.n	80004a6 <fsm_automatic_run+0x35a>
			setTimer1(250);
 80003b2:	20fa      	movs	r0, #250	; 0xfa
 80003b4:	f000 fd26 	bl	8000e04 <setTimer1>
			status = MAN_MODE2;
 80003b8:	4b02      	ldr	r3, [pc, #8]	; (80003c4 <fsm_automatic_run+0x278>)
 80003ba:	220b      	movs	r2, #11
 80003bc:	601a      	str	r2, [r3, #0]
			setTrafficRedBlink();
 80003be:	f000 fec9 	bl	8001154 <setTrafficRedBlink>

		}
		break;
 80003c2:	e070      	b.n	80004a6 <fsm_automatic_run+0x35a>
 80003c4:	2000006c 	.word	0x2000006c
 80003c8:	20000010 	.word	0x20000010
 80003cc:	2000000c 	.word	0x2000000c
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000004 	.word	0x20000004
 80003d8:	20000018 	.word	0x20000018
 80003dc:	20000014 	.word	0x20000014
 80003e0:	20000020 	.word	0x20000020
 80003e4:	2000001c 	.word	0x2000001c
 80003e8:	200000ac 	.word	0x200000ac
 80003ec:	20000008 	.word	0x20000008
 80003f0:	200000b0 	.word	0x200000b0
		 * and call updateClockBuffer to update value is displayed in led 7 Segment
		 * with parameter is timeRed-- and timeGreen--
		 * if timer2_flag = 1, update and decrease timeYellow and timeRed
		 *  if is_button_pressed(0) = 1, move to MAN_MODE2
		 */
		setTrafficYellow();
 80003f4:	f000 fe56 	bl	80010a4 <setTrafficYellow>
		setTrafficRed1();
 80003f8:	f000 fe6a 	bl	80010d0 <setTrafficRed1>

		if(timer1_flag == 1){
 80003fc:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <fsm_automatic_run+0x364>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d125      	bne.n	8000450 <fsm_automatic_run+0x304>
			status = AUTO_RED_GREEN;
 8000404:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <fsm_automatic_run+0x368>)
 8000406:	2202      	movs	r2, #2
 8000408:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 800040a:	4b2b      	ldr	r3, [pc, #172]	; (80004b8 <fsm_automatic_run+0x36c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000412:	fb02 f303 	mul.w	r3, r2, r3
 8000416:	4618      	mov	r0, r3
 8000418:	f000 fcf4 	bl	8000e04 <setTimer1>
			timeRed = defaultTimeRed;
 800041c:	4b27      	ldr	r3, [pc, #156]	; (80004bc <fsm_automatic_run+0x370>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a27      	ldr	r2, [pc, #156]	; (80004c0 <fsm_automatic_run+0x374>)
 8000422:	6013      	str	r3, [r2, #0]
			timeGreen = defaultTimeGreen;
 8000424:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <fsm_automatic_run+0x36c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a26      	ldr	r2, [pc, #152]	; (80004c4 <fsm_automatic_run+0x378>)
 800042a:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeRed--, timeGreen--);
 800042c:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <fsm_automatic_run+0x374>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	4923      	ldr	r1, [pc, #140]	; (80004c0 <fsm_automatic_run+0x374>)
 8000434:	600a      	str	r2, [r1, #0]
 8000436:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <fsm_automatic_run+0x378>)
 8000438:	6812      	ldr	r2, [r2, #0]
 800043a:	1e51      	subs	r1, r2, #1
 800043c:	4821      	ldr	r0, [pc, #132]	; (80004c4 <fsm_automatic_run+0x378>)
 800043e:	6001      	str	r1, [r0, #0]
 8000440:	4611      	mov	r1, r2
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fb02 	bl	8000a4c <updateClockBuffer>
			setTimer2(1000);
 8000448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800044c:	f000 fcf6 	bl	8000e3c <setTimer2>
		}
		if(timer2_flag == 1){
 8000450:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <fsm_automatic_run+0x37c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d111      	bne.n	800047c <fsm_automatic_run+0x330>
			updateClockBuffer(timeYellow--, timeRed--);
 8000458:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <fsm_automatic_run+0x380>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	1e5a      	subs	r2, r3, #1
 800045e:	491b      	ldr	r1, [pc, #108]	; (80004cc <fsm_automatic_run+0x380>)
 8000460:	600a      	str	r2, [r1, #0]
 8000462:	4a17      	ldr	r2, [pc, #92]	; (80004c0 <fsm_automatic_run+0x374>)
 8000464:	6812      	ldr	r2, [r2, #0]
 8000466:	1e51      	subs	r1, r2, #1
 8000468:	4815      	ldr	r0, [pc, #84]	; (80004c0 <fsm_automatic_run+0x374>)
 800046a:	6001      	str	r1, [r0, #0]
 800046c:	4611      	mov	r1, r2
 800046e:	4618      	mov	r0, r3
 8000470:	f000 faec 	bl	8000a4c <updateClockBuffer>
			setTimer2(1000);
 8000474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000478:	f000 fce0 	bl	8000e3c <setTimer2>
		}
		if(is_button_pressed(0) == 1){
 800047c:	2000      	movs	r0, #0
 800047e:	f000 faa5 	bl	80009cc <is_button_pressed>
 8000482:	4603      	mov	r3, r0
 8000484:	2b01      	cmp	r3, #1
 8000486:	d110      	bne.n	80004aa <fsm_automatic_run+0x35e>
			setTimer1(250);
 8000488:	20fa      	movs	r0, #250	; 0xfa
 800048a:	f000 fcbb 	bl	8000e04 <setTimer1>
			status = MAN_MODE2;
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <fsm_automatic_run+0x368>)
 8000490:	220b      	movs	r2, #11
 8000492:	601a      	str	r2, [r3, #0]
			setTrafficRedBlink();
 8000494:	f000 fe5e 	bl	8001154 <setTrafficRedBlink>
		}
		break;
 8000498:	e007      	b.n	80004aa <fsm_automatic_run+0x35e>
	default:
		break;
 800049a:	bf00      	nop
 800049c:	e006      	b.n	80004ac <fsm_automatic_run+0x360>
		break;
 800049e:	bf00      	nop
 80004a0:	e004      	b.n	80004ac <fsm_automatic_run+0x360>
		break;
 80004a2:	bf00      	nop
 80004a4:	e002      	b.n	80004ac <fsm_automatic_run+0x360>
		break;
 80004a6:	bf00      	nop
 80004a8:	e000      	b.n	80004ac <fsm_automatic_run+0x360>
		break;
 80004aa:	bf00      	nop
	}
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000ac 	.word	0x200000ac
 80004b4:	2000006c 	.word	0x2000006c
 80004b8:	20000010 	.word	0x20000010
 80004bc:	2000000c 	.word	0x2000000c
 80004c0:	20000000 	.word	0x20000000
 80004c4:	20000004 	.word	0x20000004
 80004c8:	200000b0 	.word	0x200000b0
 80004cc:	20000008 	.word	0x20000008

080004d0 <fsm_manual_run>:
 */


#include "fsm_manual.h"

void fsm_manual_run(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	switch(status){
 80004d4:	4b92      	ldr	r3, [pc, #584]	; (8000720 <fsm_manual_run+0x250>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3b0a      	subs	r3, #10
 80004da:	2b03      	cmp	r3, #3
 80004dc:	f200 811d 	bhi.w	800071a <fsm_manual_run+0x24a>
 80004e0:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <fsm_manual_run+0x18>)
 80004e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e6:	bf00      	nop
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	0800054f 	.word	0x0800054f
 80004f0:	080005d3 	.word	0x080005d3
 80004f4:	08000657 	.word	0x08000657
	case MAN_MODE1:
		// return INIT status AUTO_RED_GREEN
		setTimer1(defaultTimeGreen*1000);
 80004f8:	4b8a      	ldr	r3, [pc, #552]	; (8000724 <fsm_manual_run+0x254>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000500:	fb02 f303 	mul.w	r3, r2, r3
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fc7d 	bl	8000e04 <setTimer1>
		setTimer2(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f000 fc95 	bl	8000e3c <setTimer2>
		timeRed = defaultTimeRed;
 8000512:	4b85      	ldr	r3, [pc, #532]	; (8000728 <fsm_manual_run+0x258>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a85      	ldr	r2, [pc, #532]	; (800072c <fsm_manual_run+0x25c>)
 8000518:	6013      	str	r3, [r2, #0]
		timeGreen = defaultTimeGreen;
 800051a:	4b82      	ldr	r3, [pc, #520]	; (8000724 <fsm_manual_run+0x254>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a84      	ldr	r2, [pc, #528]	; (8000730 <fsm_manual_run+0x260>)
 8000520:	6013      	str	r3, [r2, #0]
		tempYellow = defaultTimeYellow;
 8000522:	4b84      	ldr	r3, [pc, #528]	; (8000734 <fsm_manual_run+0x264>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a84      	ldr	r2, [pc, #528]	; (8000738 <fsm_manual_run+0x268>)
 8000528:	6013      	str	r3, [r2, #0]
		updateClockBuffer(timeRed--, timeGreen--);
 800052a:	4b80      	ldr	r3, [pc, #512]	; (800072c <fsm_manual_run+0x25c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	1e5a      	subs	r2, r3, #1
 8000530:	497e      	ldr	r1, [pc, #504]	; (800072c <fsm_manual_run+0x25c>)
 8000532:	600a      	str	r2, [r1, #0]
 8000534:	4a7e      	ldr	r2, [pc, #504]	; (8000730 <fsm_manual_run+0x260>)
 8000536:	6812      	ldr	r2, [r2, #0]
 8000538:	1e51      	subs	r1, r2, #1
 800053a:	487d      	ldr	r0, [pc, #500]	; (8000730 <fsm_manual_run+0x260>)
 800053c:	6001      	str	r1, [r0, #0]
 800053e:	4611      	mov	r1, r2
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fa83 	bl	8000a4c <updateClockBuffer>
		status = AUTO_RED_GREEN;
 8000546:	4b76      	ldr	r3, [pc, #472]	; (8000720 <fsm_manual_run+0x250>)
 8000548:	2202      	movs	r2, #2
 800054a:	601a      	str	r2, [r3, #0]
		break;
 800054c:	e0e6      	b.n	800071c <fsm_manual_run+0x24c>
	case MAN_MODE2:
		// only red leds in both road1 and road2 are ON, other leds are OFF

		// if button0 is pressed, status will move to MAN_MODE3
		if(is_button_pressed(0) == 1){
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fa3c 	bl	80009cc <is_button_pressed>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d108      	bne.n	800056c <fsm_manual_run+0x9c>
			status = MAN_MODE3;
 800055a:	4b71      	ldr	r3, [pc, #452]	; (8000720 <fsm_manual_run+0x250>)
 800055c:	220c      	movs	r2, #12
 800055e:	601a      	str	r2, [r3, #0]
			setTrafficYellowBlink();
 8000560:	f000 fe1c 	bl	800119c <setTrafficYellowBlink>
			setTimer1(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000568:	f000 fc4c 	bl	8000e04 <setTimer1>
		}
		//blinking red led
		if(timer1_flag == 1){
 800056c:	4b73      	ldr	r3, [pc, #460]	; (800073c <fsm_manual_run+0x26c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d10b      	bne.n	800058c <fsm_manual_run+0xbc>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000574:	2104      	movs	r1, #4
 8000576:	4872      	ldr	r0, [pc, #456]	; (8000740 <fsm_manual_run+0x270>)
 8000578:	f001 f997 	bl	80018aa <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 800057c:	2120      	movs	r1, #32
 800057e:	4870      	ldr	r0, [pc, #448]	; (8000740 <fsm_manual_run+0x270>)
 8000580:	f001 f993 	bl	80018aa <HAL_GPIO_TogglePin>
			setTimer1(500); //2Hz
 8000584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000588:	f000 fc3c 	bl	8000e04 <setTimer1>
		}
		//if button is pressed, tempRed value'll increase 1 unit
		//if value overcome 99, it'll return 1
		if(is_button_pressed(1) == 1){
 800058c:	2001      	movs	r0, #1
 800058e:	f000 fa1d 	bl	80009cc <is_button_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b01      	cmp	r3, #1
 8000596:	d10b      	bne.n	80005b0 <fsm_manual_run+0xe0>
			tempRed++;
 8000598:	4b6a      	ldr	r3, [pc, #424]	; (8000744 <fsm_manual_run+0x274>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a69      	ldr	r2, [pc, #420]	; (8000744 <fsm_manual_run+0x274>)
 80005a0:	6013      	str	r3, [r2, #0]
			if(tempRed >99) tempRed = 1;
 80005a2:	4b68      	ldr	r3, [pc, #416]	; (8000744 <fsm_manual_run+0x274>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b63      	cmp	r3, #99	; 0x63
 80005a8:	dd02      	ble.n	80005b0 <fsm_manual_run+0xe0>
 80005aa:	4b66      	ldr	r3, [pc, #408]	; (8000744 <fsm_manual_run+0x274>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
		}
		//if button3 is pressed, tempRed is assign for dedefaultTimeRed
		if(is_button_pressed(2) == 1){
 80005b0:	2002      	movs	r0, #2
 80005b2:	f000 fa0b 	bl	80009cc <is_button_pressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d103      	bne.n	80005c4 <fsm_manual_run+0xf4>
			defaultTimeRed = tempRed ;
 80005bc:	4b61      	ldr	r3, [pc, #388]	; (8000744 <fsm_manual_run+0x274>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a59      	ldr	r2, [pc, #356]	; (8000728 <fsm_manual_run+0x258>)
 80005c2:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(2, defaultTimeRed);
 80005c4:	4b58      	ldr	r3, [pc, #352]	; (8000728 <fsm_manual_run+0x258>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	2002      	movs	r0, #2
 80005cc:	f000 fa3e 	bl	8000a4c <updateClockBuffer>
		break;
 80005d0:	e0a4      	b.n	800071c <fsm_manual_run+0x24c>
	case MAN_MODE3:
		// only yellow led in both road1 and road2 are ON, other led are OFF

		// if button0 is pressed, status will move to MAN_MODE4
		if(is_button_pressed(0) == 1){
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f9fa 	bl	80009cc <is_button_pressed>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d108      	bne.n	80005f0 <fsm_manual_run+0x120>
			status = MAN_MODE4;
 80005de:	4b50      	ldr	r3, [pc, #320]	; (8000720 <fsm_manual_run+0x250>)
 80005e0:	220d      	movs	r2, #13
 80005e2:	601a      	str	r2, [r3, #0]
			setTrafficGreenBlink();
 80005e4:	f000 fdfe 	bl	80011e4 <setTrafficGreenBlink>
			setTimer1(500);
 80005e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ec:	f000 fc0a 	bl	8000e04 <setTimer1>
		}
		//blinking yellow led
		if(timer1_flag == 1){
 80005f0:	4b52      	ldr	r3, [pc, #328]	; (800073c <fsm_manual_run+0x26c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d10b      	bne.n	8000610 <fsm_manual_run+0x140>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80005f8:	2108      	movs	r1, #8
 80005fa:	4851      	ldr	r0, [pc, #324]	; (8000740 <fsm_manual_run+0x270>)
 80005fc:	f001 f955 	bl	80018aa <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	484f      	ldr	r0, [pc, #316]	; (8000740 <fsm_manual_run+0x270>)
 8000604:	f001 f951 	bl	80018aa <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060c:	f000 fbfa 	bl	8000e04 <setTimer1>
		}
		//if button is pressed, tempYellow value'll increase 1 unit
		//if value overcome 99, it'll return 1
		if(is_button_pressed(1) == 1){
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f9db 	bl	80009cc <is_button_pressed>
 8000616:	4603      	mov	r3, r0
 8000618:	2b01      	cmp	r3, #1
 800061a:	d10b      	bne.n	8000634 <fsm_manual_run+0x164>
			tempYellow++;
 800061c:	4b46      	ldr	r3, [pc, #280]	; (8000738 <fsm_manual_run+0x268>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	4a45      	ldr	r2, [pc, #276]	; (8000738 <fsm_manual_run+0x268>)
 8000624:	6013      	str	r3, [r2, #0]
			if(tempYellow > 99) tempYellow = 1;
 8000626:	4b44      	ldr	r3, [pc, #272]	; (8000738 <fsm_manual_run+0x268>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b63      	cmp	r3, #99	; 0x63
 800062c:	dd02      	ble.n	8000634 <fsm_manual_run+0x164>
 800062e:	4b42      	ldr	r3, [pc, #264]	; (8000738 <fsm_manual_run+0x268>)
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
		}
		//if button3 is pressed, tempYellow is assign for dedefaultTimeYelow
		if(is_button_pressed(2) == 1){
 8000634:	2002      	movs	r0, #2
 8000636:	f000 f9c9 	bl	80009cc <is_button_pressed>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d103      	bne.n	8000648 <fsm_manual_run+0x178>
			defaultTimeYellow = tempYellow ;
 8000640:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <fsm_manual_run+0x268>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3b      	ldr	r2, [pc, #236]	; (8000734 <fsm_manual_run+0x264>)
 8000646:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(3, defaultTimeYellow);
 8000648:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <fsm_manual_run+0x264>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f9fc 	bl	8000a4c <updateClockBuffer>
		break;
 8000654:	e062      	b.n	800071c <fsm_manual_run+0x24c>
	case MAN_MODE4:
		// if button0 is pressed, status will move to MAN_MODE1
		if(is_button_pressed(0) == 1)
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f9b8 	bl	80009cc <is_button_pressed>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d128      	bne.n	80006b4 <fsm_manual_run+0x1e4>
		{
			if (defaultTimeRed < (defaultTimeGreen + defaultTimeYellow))
 8000662:	4b30      	ldr	r3, [pc, #192]	; (8000724 <fsm_manual_run+0x254>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b33      	ldr	r3, [pc, #204]	; (8000734 <fsm_manual_run+0x264>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	441a      	add	r2, r3
 800066c:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <fsm_manual_run+0x258>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	dd0c      	ble.n	800068e <fsm_manual_run+0x1be>
				{
				defaultTimeRed = olderTimeRed;
 8000674:	4b34      	ldr	r3, [pc, #208]	; (8000748 <fsm_manual_run+0x278>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <fsm_manual_run+0x258>)
 800067a:	6013      	str	r3, [r2, #0]
				defaultTimeYellow = olderTimeYellow;
 800067c:	4b33      	ldr	r3, [pc, #204]	; (800074c <fsm_manual_run+0x27c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a2c      	ldr	r2, [pc, #176]	; (8000734 <fsm_manual_run+0x264>)
 8000682:	6013      	str	r3, [r2, #0]
				defaultTimeGreen = olderTimeGreen;
 8000684:	4b32      	ldr	r3, [pc, #200]	; (8000750 <fsm_manual_run+0x280>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <fsm_manual_run+0x254>)
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	e00b      	b.n	80006a6 <fsm_manual_run+0x1d6>
				}
			else
				{
				olderTimeRed = defaultTimeRed;
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <fsm_manual_run+0x258>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <fsm_manual_run+0x278>)
 8000694:	6013      	str	r3, [r2, #0]
				olderTimeYellow = defaultTimeYellow;
 8000696:	4b27      	ldr	r3, [pc, #156]	; (8000734 <fsm_manual_run+0x264>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a2c      	ldr	r2, [pc, #176]	; (800074c <fsm_manual_run+0x27c>)
 800069c:	6013      	str	r3, [r2, #0]
				olderTimeGreen = defaultTimeGreen;
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <fsm_manual_run+0x254>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a2b      	ldr	r2, [pc, #172]	; (8000750 <fsm_manual_run+0x280>)
 80006a4:	6013      	str	r3, [r2, #0]
				}

			status = MAN_MODE1;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <fsm_manual_run+0x250>)
 80006a8:	220a      	movs	r2, #10
 80006aa:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80006ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b0:	f000 fba8 	bl	8000e04 <setTimer1>
		}
		// only green led in both road1 and road2 are ON, other led are OFF
		//blinking Green Led
		if(timer1_flag == 1){
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <fsm_manual_run+0x26c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d10b      	bne.n	80006d4 <fsm_manual_run+0x204>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	4820      	ldr	r0, [pc, #128]	; (8000740 <fsm_manual_run+0x270>)
 80006c0:	f001 f8f3 	bl	80018aa <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80006c4:	2110      	movs	r1, #16
 80006c6:	481e      	ldr	r0, [pc, #120]	; (8000740 <fsm_manual_run+0x270>)
 80006c8:	f001 f8ef 	bl	80018aa <HAL_GPIO_TogglePin>
			setTimer1(500);
 80006cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d0:	f000 fb98 	bl	8000e04 <setTimer1>
		}
		//if button is pressed, tempGreen value 'll increase 1 unit
		//if value overcome 99, it'll return 1
			if(is_button_pressed(1) == 1){
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 f979 	bl	80009cc <is_button_pressed>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10b      	bne.n	80006f8 <fsm_manual_run+0x228>
				tempGreen++;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <fsm_manual_run+0x284>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <fsm_manual_run+0x284>)
 80006e8:	6013      	str	r3, [r2, #0]
				if(tempGreen > 99) tempGreen = 1;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <fsm_manual_run+0x284>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b63      	cmp	r3, #99	; 0x63
 80006f0:	dd02      	ble.n	80006f8 <fsm_manual_run+0x228>
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <fsm_manual_run+0x284>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
			}
		//if button3 is pressed, tempGreen is assign for dedefaultTimeGreen
			if(is_button_pressed(2) == 1){
 80006f8:	2002      	movs	r0, #2
 80006fa:	f000 f967 	bl	80009cc <is_button_pressed>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d103      	bne.n	800070c <fsm_manual_run+0x23c>
				defaultTimeGreen = tempGreen ;
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <fsm_manual_run+0x284>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a06      	ldr	r2, [pc, #24]	; (8000724 <fsm_manual_run+0x254>)
 800070a:	6013      	str	r3, [r2, #0]
			}
		updateClockBuffer(4, defaultTimeGreen);
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <fsm_manual_run+0x254>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	2004      	movs	r0, #4
 8000714:	f000 f99a 	bl	8000a4c <updateClockBuffer>
		break;
 8000718:	e000      	b.n	800071c <fsm_manual_run+0x24c>
	default:
		break;
 800071a:	bf00      	nop
	}
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000006c 	.word	0x2000006c
 8000724:	20000010 	.word	0x20000010
 8000728:	2000000c 	.word	0x2000000c
 800072c:	20000000 	.word	0x20000000
 8000730:	20000004 	.word	0x20000004
 8000734:	20000014 	.word	0x20000014
 8000738:	20000020 	.word	0x20000020
 800073c:	200000ac 	.word	0x200000ac
 8000740:	40010800 	.word	0x40010800
 8000744:	20000018 	.word	0x20000018
 8000748:	200000c8 	.word	0x200000c8
 800074c:	200000c4 	.word	0x200000c4
 8000750:	200000cc 	.word	0x200000cc
 8000754:	2000001c 	.word	0x2000001c

08000758 <getKeyProcess>:
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static int buttonState[N0_OF_BUTTONS] = {BUTTON_IS_RELEASED, BUTTON_IS_RELEASED, BUTTON_IS_RELEASED};
static int button_flag[N0_OF_BUTTONS];
// this function turn on button_flag
void getKeyProcess(int index){
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	db07      	blt.n	8000776 <getKeyProcess+0x1e>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b02      	cmp	r3, #2
 800076a:	dc04      	bgt.n	8000776 <getKeyProcess+0x1e>
		button_flag[index] = 1;
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <getKeyProcess+0x28>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2101      	movs	r1, #1
 8000772:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	2000008c 	.word	0x2000008c

08000784 <get1sFlag>:
// this function turn on flagForButtonPress1s
void get1sFlag(int index){
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	db07      	blt.n	80007a2 <get1sFlag+0x1e>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b02      	cmp	r3, #2
 8000796:	dc04      	bgt.n	80007a2 <get1sFlag+0x1e>
			flagForButtonPress1s[index] = 1;
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <get1sFlag+0x28>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
		}
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000080 	.word	0x20000080

080007b0 <fsm_input_processing>:


void fsm_input_processing(GPIO_PinState buttonBuffer[], int index){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	switch(buttonState[index]){
 80007ba:	4a4b      	ldr	r2, [pc, #300]	; (80008e8 <fsm_input_processing+0x138>)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d04d      	beq.n	8000862 <fsm_input_processing+0xb2>
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	f300 8082 	bgt.w	80008d0 <fsm_input_processing+0x120>
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <fsm_input_processing+0x26>
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d037      	beq.n	8000844 <fsm_input_processing+0x94>
			buttonState[index] = BUTTON_IS_RELEASED;
			counterForButtonPress1s[index] = 0;
		}
		break;
	default:
		break;
 80007d4:	e07c      	b.n	80008d0 <fsm_input_processing+0x120>
		if(counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING){
 80007d6:	4a45      	ldr	r2, [pc, #276]	; (80008ec <fsm_input_processing+0x13c>)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007de:	2b63      	cmp	r3, #99	; 0x63
 80007e0:	d81f      	bhi.n	8000822 <fsm_input_processing+0x72>
			counterForButtonPress1s[index]++;
 80007e2:	4a42      	ldr	r2, [pc, #264]	; (80008ec <fsm_input_processing+0x13c>)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b299      	uxth	r1, r3
 80007ee:	4a3f      	ldr	r2, [pc, #252]	; (80008ec <fsm_input_processing+0x13c>)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(counterForButtonPress1s[index] == DURATION_FOR_AUTO_INCREASING){
 80007f6:	4a3d      	ldr	r2, [pc, #244]	; (80008ec <fsm_input_processing+0x13c>)
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007fe:	2b64      	cmp	r3, #100	; 0x64
 8000800:	d10f      	bne.n	8000822 <fsm_input_processing+0x72>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_1s;
 8000802:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <fsm_input_processing+0x138>)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	2102      	movs	r1, #2
 8000808:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counterForButtonPress1s[index] = 0;
 800080c:	4a37      	ldr	r2, [pc, #220]	; (80008ec <fsm_input_processing+0x13c>)
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	2100      	movs	r1, #0
 8000812:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				getKeyProcess(index);
 8000816:	6838      	ldr	r0, [r7, #0]
 8000818:	f7ff ff9e 	bl	8000758 <getKeyProcess>
				get1sFlag(index);
 800081c:	6838      	ldr	r0, [r7, #0]
 800081e:	f7ff ffb1 	bl	8000784 <get1sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d152      	bne.n	80008d4 <fsm_input_processing+0x124>
			buttonState[index] = BUTTON_IS_RELEASED;
 800082e:	4a2e      	ldr	r2, [pc, #184]	; (80008e8 <fsm_input_processing+0x138>)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	2101      	movs	r1, #1
 8000834:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress1s[index] = 0;
 8000838:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <fsm_input_processing+0x13c>)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	2100      	movs	r1, #0
 800083e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8000842:	e047      	b.n	80008d4 <fsm_input_processing+0x124>
		if(buttonBuffer[index] == BUTTON_PRESSED){
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d143      	bne.n	80008d8 <fsm_input_processing+0x128>
			buttonState[index] = BUTTON_IS_PRESSED;
 8000850:	4a25      	ldr	r2, [pc, #148]	; (80008e8 <fsm_input_processing+0x138>)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	2100      	movs	r1, #0
 8000856:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			getKeyProcess(index);
 800085a:	6838      	ldr	r0, [r7, #0]
 800085c:	f7ff ff7c 	bl	8000758 <getKeyProcess>
		break;
 8000860:	e03a      	b.n	80008d8 <fsm_input_processing+0x128>
		if(counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING){
 8000862:	4a22      	ldr	r2, [pc, #136]	; (80008ec <fsm_input_processing+0x13c>)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800086a:	2b63      	cmp	r3, #99	; 0x63
 800086c:	d81f      	bhi.n	80008ae <fsm_input_processing+0xfe>
					counterForButtonPress1s[index]++;
 800086e:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <fsm_input_processing+0x13c>)
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000876:	3301      	adds	r3, #1
 8000878:	b299      	uxth	r1, r3
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <fsm_input_processing+0x13c>)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress1s[index] == DURATION_FOR_AUTO_INCREASING){
 8000882:	4a1a      	ldr	r2, [pc, #104]	; (80008ec <fsm_input_processing+0x13c>)
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088a:	2b64      	cmp	r3, #100	; 0x64
 800088c:	d10f      	bne.n	80008ae <fsm_input_processing+0xfe>
						buttonState[index] = BUTTON_PRESSED_MORE_THAN_1s;
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <fsm_input_processing+0x138>)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	2102      	movs	r1, #2
 8000894:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counterForButtonPress1s[index] = 0;
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <fsm_input_processing+0x13c>)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	2100      	movs	r1, #0
 800089e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						getKeyProcess(index);
 80008a2:	6838      	ldr	r0, [r7, #0]
 80008a4:	f7ff ff58 	bl	8000758 <getKeyProcess>
						get1sFlag(index);
 80008a8:	6838      	ldr	r0, [r7, #0]
 80008aa:	f7ff ff6b 	bl	8000784 <get1sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	4413      	add	r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d110      	bne.n	80008dc <fsm_input_processing+0x12c>
			buttonState[index] = BUTTON_IS_RELEASED;
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <fsm_input_processing+0x138>)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	2101      	movs	r1, #1
 80008c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress1s[index] = 0;
 80008c4:	4a09      	ldr	r2, [pc, #36]	; (80008ec <fsm_input_processing+0x13c>)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2100      	movs	r1, #0
 80008ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 80008ce:	e005      	b.n	80008dc <fsm_input_processing+0x12c>
		break;
 80008d0:	bf00      	nop
 80008d2:	e004      	b.n	80008de <fsm_input_processing+0x12e>
		break;
 80008d4:	bf00      	nop
 80008d6:	e002      	b.n	80008de <fsm_input_processing+0x12e>
		break;
 80008d8:	bf00      	nop
 80008da:	e000      	b.n	80008de <fsm_input_processing+0x12e>
		break;
 80008dc:	bf00      	nop
	}
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000024 	.word	0x20000024
 80008ec:	20000084 	.word	0x20000084

080008f0 <button_reading>:

void button_reading(void){
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 80008f6:	2300      	movs	r3, #0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	e055      	b.n	80009a8 <button_reading+0xb8>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	492d      	ldr	r1, [pc, #180]	; (80009b8 <button_reading+0xc8>)
 8000902:	5c89      	ldrb	r1, [r1, r2]
 8000904:	4a2d      	ldr	r2, [pc, #180]	; (80009bc <button_reading+0xcc>)
 8000906:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	492c      	ldr	r1, [pc, #176]	; (80009c0 <button_reading+0xd0>)
 800090e:	5c89      	ldrb	r1, [r1, r2]
 8000910:	4a29      	ldr	r2, [pc, #164]	; (80009b8 <button_reading+0xc8>)
 8000912:	54d1      	strb	r1, [r2, r3]
		// Chosing Which button is pressed.
		switch(i){
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d01c      	beq.n	8000954 <button_reading+0x64>
 800091a:	2b02      	cmp	r3, #2
 800091c:	dc25      	bgt.n	800096a <button_reading+0x7a>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <button_reading+0x38>
 8000922:	2b01      	cmp	r3, #1
 8000924:	d00b      	beq.n	800093e <button_reading+0x4e>
			break;
		case 2://  read signal from button3
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
			break;
		default:
			break;
 8000926:	e020      	b.n	800096a <button_reading+0x7a>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000928:	79fc      	ldrb	r4, [r7, #7]
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	4825      	ldr	r0, [pc, #148]	; (80009c4 <button_reading+0xd4>)
 8000930:	f000 ff8c 	bl	800184c <HAL_GPIO_ReadPin>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <button_reading+0xd0>)
 800093a:	551a      	strb	r2, [r3, r4]
			break;
 800093c:	e016      	b.n	800096c <button_reading+0x7c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 800093e:	79fc      	ldrb	r4, [r7, #7]
 8000940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000944:	481f      	ldr	r0, [pc, #124]	; (80009c4 <button_reading+0xd4>)
 8000946:	f000 ff81 	bl	800184c <HAL_GPIO_ReadPin>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <button_reading+0xd0>)
 8000950:	551a      	strb	r2, [r3, r4]
			break;
 8000952:	e00b      	b.n	800096c <button_reading+0x7c>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000954:	79fc      	ldrb	r4, [r7, #7]
 8000956:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095a:	481a      	ldr	r0, [pc, #104]	; (80009c4 <button_reading+0xd4>)
 800095c:	f000 ff76 	bl	800184c <HAL_GPIO_ReadPin>
 8000960:	4603      	mov	r3, r0
 8000962:	461a      	mov	r2, r3
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <button_reading+0xd0>)
 8000966:	551a      	strb	r2, [r3, r4]
			break;
 8000968:	e000      	b.n	800096c <button_reading+0x7c>
			break;
 800096a:	bf00      	nop
		}
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <button_reading+0xcc>)
 8000970:	5cd2      	ldrb	r2, [r2, r3]
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4910      	ldr	r1, [pc, #64]	; (80009b8 <button_reading+0xc8>)
 8000976:	5ccb      	ldrb	r3, [r1, r3]
 8000978:	429a      	cmp	r2, r3
 800097a:	d112      	bne.n	80009a2 <button_reading+0xb2>
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <button_reading+0xc8>)
 8000980:	5cd2      	ldrb	r2, [r2, r3]
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	490e      	ldr	r1, [pc, #56]	; (80009c0 <button_reading+0xd0>)
 8000986:	5ccb      	ldrb	r3, [r1, r3]
 8000988:	429a      	cmp	r2, r3
 800098a:	d10a      	bne.n	80009a2 <button_reading+0xb2>
			buttonBuffer[i] = debounceButtonBuffer3[i];
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	490a      	ldr	r1, [pc, #40]	; (80009bc <button_reading+0xcc>)
 8000992:	5c89      	ldrb	r1, [r1, r2]
 8000994:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <button_reading+0xd8>)
 8000996:	54d1      	strb	r1, [r2, r3]
			//call fsm_input_processing() function
			fsm_input_processing(buttonBuffer,i);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4619      	mov	r1, r3
 800099c:	480a      	ldr	r0, [pc, #40]	; (80009c8 <button_reading+0xd8>)
 800099e:	f7ff ff07 	bl	80007b0 <fsm_input_processing>
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	3301      	adds	r3, #1
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d9a6      	bls.n	80008fc <button_reading+0xc>
		}

	}
}
 80009ae:	bf00      	nop
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	20000078 	.word	0x20000078
 80009bc:	2000007c 	.word	0x2000007c
 80009c0:	20000074 	.word	0x20000074
 80009c4:	40010800 	.word	0x40010800
 80009c8:	20000070 	.word	0x20000070

080009cc <is_button_pressed>:


//Determine whether a button is pressed or not
int is_button_pressed(uint8_t index){
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d901      	bls.n	80009e0 <is_button_pressed+0x14>
 80009dc:	2300      	movs	r3, #0
 80009de:	e00d      	b.n	80009fc <is_button_pressed+0x30>
	if(button_flag[index] == 1){
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <is_button_pressed+0x3c>)
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d106      	bne.n	80009fa <is_button_pressed+0x2e>
		//set button flag value = 0
		button_flag[index] = 0;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <is_button_pressed+0x3c>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e000      	b.n	80009fc <is_button_pressed+0x30>
	}
	return 0;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	2000008c 	.word	0x2000008c

08000a0c <display7SEG1>:

uint16_t led_matrix[MAX_MATRIX] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7D, 0x07, 0x7F, 0x6f};
int index_led = 0;
int led_buffer[MAX_BUFF] = {0,0,0,0};
//display LED 7 segment
void display7SEG1(int number){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	uint16_t bit_var = led_matrix[number];
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <display7SEG1+0x38>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1c:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, bit_var, RESET);
 8000a1e:	89fb      	ldrh	r3, [r7, #14]
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <display7SEG1+0x3c>)
 8000a26:	f000 ff28 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ~bit_var, SET);
 8000a2a:	89fb      	ldrh	r3, [r7, #14]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	2201      	movs	r2, #1
 8000a32:	4619      	mov	r1, r3
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <display7SEG1+0x3c>)
 8000a36:	f000 ff20 	bl	800187a <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000030 	.word	0x20000030
 8000a48:	40010c00 	.word	0x40010c00

08000a4c <updateClockBuffer>:
//	HAL_GPIO_WritePin(GPIOB, ~bit_var, SET);
//}

//if counter1 < 10, example value = 2, led7 1 display 0 and led 7 segment 2 display 2
//if counter1 > 10, ex value = 12, led7 1 display 1 and led 7 segment 2 display 2
void updateClockBuffer(int counter1, int counter2){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	    led_buffer[0] = counter1 / 10;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a18      	ldr	r2, [pc, #96]	; (8000abc <updateClockBuffer+0x70>)
 8000a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5e:	1092      	asrs	r2, r2, #2
 8000a60:	17db      	asrs	r3, r3, #31
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <updateClockBuffer+0x74>)
 8000a66:	6013      	str	r3, [r2, #0]
		led_buffer[1] = counter1 % 10;
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <updateClockBuffer+0x70>)
 8000a6c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a70:	109a      	asrs	r2, r3, #2
 8000a72:	17cb      	asrs	r3, r1, #31
 8000a74:	1ad2      	subs	r2, r2, r3
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	1aca      	subs	r2, r1, r3
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <updateClockBuffer+0x74>)
 8000a82:	605a      	str	r2, [r3, #4]
		led_buffer[2] = counter2 / 10;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <updateClockBuffer+0x70>)
 8000a88:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8c:	1092      	asrs	r2, r2, #2
 8000a8e:	17db      	asrs	r3, r3, #31
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <updateClockBuffer+0x74>)
 8000a94:	6093      	str	r3, [r2, #8]
		led_buffer[3] = counter2 % 10;
 8000a96:	6839      	ldr	r1, [r7, #0]
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <updateClockBuffer+0x70>)
 8000a9a:	fb83 2301 	smull	r2, r3, r3, r1
 8000a9e:	109a      	asrs	r2, r3, #2
 8000aa0:	17cb      	asrs	r3, r1, #31
 8000aa2:	1ad2      	subs	r2, r2, r3
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	1aca      	subs	r2, r1, r3
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <updateClockBuffer+0x74>)
 8000ab0:	60da      	str	r2, [r3, #12]
 }
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	66666667 	.word	0x66666667
 8000ac0:	2000009c 	.word	0x2000009c

08000ac4 <update7SEG1>:
// show which led 7 segment is ON and the value it display
void update7SEG1(int index){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d852      	bhi.n	8000b78 <update7SEG1+0xb4>
 8000ad2:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <update7SEG1+0x14>)
 8000ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad8:	08000ae9 	.word	0x08000ae9
 8000adc:	08000b0d 	.word	0x08000b0d
 8000ae0:	08000b31 	.word	0x08000b31
 8000ae4:	08000b55 	.word	0x08000b55
	switch(index){
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aee:	4825      	ldr	r0, [pc, #148]	; (8000b84 <update7SEG1+0xc0>)
 8000af0:	f000 fec3 	bl	800187a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000afa:	4822      	ldr	r0, [pc, #136]	; (8000b84 <update7SEG1+0xc0>)
 8000afc:	f000 febd 	bl	800187a <HAL_GPIO_WritePin>
		display7SEG1(led_buffer[0]);
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <update7SEG1+0xc4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff81 	bl	8000a0c <display7SEG1>
		break;
 8000b0a:	e036      	b.n	8000b7a <update7SEG1+0xb6>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b12:	481c      	ldr	r0, [pc, #112]	; (8000b84 <update7SEG1+0xc0>)
 8000b14:	f000 feb1 	bl	800187a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 8000b1e:	4819      	ldr	r0, [pc, #100]	; (8000b84 <update7SEG1+0xc0>)
 8000b20:	f000 feab 	bl	800187a <HAL_GPIO_WritePin>
		display7SEG1(led_buffer[1]);
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <update7SEG1+0xc4>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff6f 	bl	8000a0c <display7SEG1>
		break;
 8000b2e:	e024      	b.n	8000b7a <update7SEG1+0xb6>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b36:	4813      	ldr	r0, [pc, #76]	; (8000b84 <update7SEG1+0xc0>)
 8000b38:	f000 fe9f 	bl	800187a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <update7SEG1+0xc0>)
 8000b44:	f000 fe99 	bl	800187a <HAL_GPIO_WritePin>
		display7SEG1(led_buffer[2]);
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <update7SEG1+0xc4>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5d 	bl	8000a0c <display7SEG1>
		break;
 8000b52:	e012      	b.n	8000b7a <update7SEG1+0xb6>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <update7SEG1+0xc0>)
 8000b5c:	f000 fe8d 	bl	800187a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin| EN1_Pin | EN2_Pin , SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <update7SEG1+0xc0>)
 8000b68:	f000 fe87 	bl	800187a <HAL_GPIO_WritePin>
		display7SEG1(led_buffer[3]);
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <update7SEG1+0xc4>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff4b 	bl	8000a0c <display7SEG1>
		break;
 8000b76:	e000      	b.n	8000b7a <update7SEG1+0xb6>
	default:
		break;
 8000b78:	bf00      	nop
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40010800 	.word	0x40010800
 8000b88:	2000009c 	.word	0x2000009c

08000b8c <scanLed>:


// display time value in LED 7 SEGMENT
void scanLed(){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <scanLed+0x34>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d111      	bne.n	8000bbc <scanLed+0x30>
		update7SEG1(index_led++);
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <scanLed+0x38>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	4909      	ldr	r1, [pc, #36]	; (8000bc4 <scanLed+0x38>)
 8000ba0:	600a      	str	r2, [r1, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff8e 	bl	8000ac4 <update7SEG1>
		if(index_led > 3) index_led = 0;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <scanLed+0x38>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	dd02      	ble.n	8000bb6 <scanLed+0x2a>
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <scanLed+0x38>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
		setTimer3(250);
 8000bb6:	20fa      	movs	r0, #250	; 0xfa
 8000bb8:	f000 f95c 	bl	8000e74 <setTimer3>
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000b4 	.word	0x200000b4
 8000bc4:	20000098 	.word	0x20000098

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 fb54 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f818 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f000 f89e 	bl	8000d14 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bd8:	f000 f850 	bl	8000c7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <main+0x34>)
 8000bde:	f001 faa9 	bl	8002134 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = INIT;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <main+0x38>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
  setTimer3(100);
 8000be8:	2064      	movs	r0, #100	; 0x64
 8000bea:	f000 f943 	bl	8000e74 <setTimer3>

  while (1)
  {
	  fsm_automatic_run();
 8000bee:	f7ff faad 	bl	800014c <fsm_automatic_run>
	  fsm_manual_run();
 8000bf2:	f7ff fc6d 	bl	80004d0 <fsm_manual_run>
	  scanLed();
 8000bf6:	f7ff ffc9 	bl	8000b8c <scanLed>
	  fsm_automatic_run();
 8000bfa:	e7f8      	b.n	8000bee <main+0x26>
 8000bfc:	200000d0 	.word	0x200000d0
 8000c00:	2000006c 	.word	0x2000006c

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	; 0x40
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	2228      	movs	r2, #40	; 0x28
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 fe3e 	bl	8002894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fe4e 	bl	80018dc <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c46:	f000 f8d8 	bl	8000dfa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f8ba 	bl	8001ddc <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 f8c4 	bl	8000dfa <Error_Handler>
  }
}
 8000c72:	bf00      	nop
 8000c74:	3740      	adds	r7, #64	; 0x40
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000ca2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ca6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cb0:	2209      	movs	r2, #9
 8000cb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cc2:	f001 f9e7 	bl	8002094 <HAL_TIM_Base_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ccc:	f000 f895 	bl	8000dfa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cde:	f001 fb65 	bl	80023ac <HAL_TIM_ConfigClockSource>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ce8:	f000 f887 	bl	8000dfa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_TIM2_Init+0x94>)
 8000cfa:	f001 fd3d 	bl	8002778 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d04:	f000 f879 	bl	8000dfa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000d0 	.word	0x200000d0

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_GPIO_Init+0xb8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <MX_GPIO_Init+0xb8>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <MX_GPIO_Init+0xb8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_GPIO_Init+0xb8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <MX_GPIO_Init+0xb8>)
 8000d46:	f043 0308 	orr.w	r3, r3, #8
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_GPIO_Init+0xb8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CHECK_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f647 01fe 	movw	r1, #30974	; 0x78fe
 8000d5e:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <MX_GPIO_Init+0xbc>)
 8000d60:	f000 fd8b 	bl	800187a <HAL_GPIO_WritePin>
                          |LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 8000d64:	2200      	movs	r2, #0
 8000d66:	217f      	movs	r1, #127	; 0x7f
 8000d68:	481a      	ldr	r0, [pc, #104]	; (8000dd4 <MX_GPIO_Init+0xc0>)
 8000d6a:	f000 fd86 	bl	800187a <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_CHECK_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_CHECK_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000d6e:	f647 03fe 	movw	r3, #30974	; 0x78fe
 8000d72:	60bb      	str	r3, [r7, #8]
                          |LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	4619      	mov	r1, r3
 8000d86:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MX_GPIO_Init+0xbc>)
 8000d88:	f000 fbe6 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_GPIO_Init+0xc0>)
 8000da4:	f000 fbd8 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8000da8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_GPIO_Init+0xbc>)
 8000dbe:	f000 fbcb 	bl	8001558 <HAL_GPIO_Init>

}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de8:	d101      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8000dea:	f7ff fd81 	bl	80008f0 <button_reading>
	}
	timer_run();
 8000dee:	f000 f85d 	bl	8000eac <timer_run>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfe:	b672      	cpsid	i
}
 8000e00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <Error_Handler+0x8>

08000e04 <setTimer1>:

int timer1_counter = 0;
int timer2_counter = 0;
int timer3_counter = 0;

void setTimer1(int duration){
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/Timer_Cycle;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <setTimer1+0x2c>)
 8000e10:	fb82 1203 	smull	r1, r2, r2, r3
 8000e14:	1092      	asrs	r2, r2, #2
 8000e16:	17db      	asrs	r3, r3, #31
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <setTimer1+0x30>)
 8000e1c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <setTimer1+0x34>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	66666667 	.word	0x66666667
 8000e34:	200000b8 	.word	0x200000b8
 8000e38:	200000ac 	.word	0x200000ac

08000e3c <setTimer2>:
void setTimer2(int duration){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/Timer_Cycle;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <setTimer2+0x2c>)
 8000e48:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4c:	1092      	asrs	r2, r2, #2
 8000e4e:	17db      	asrs	r3, r3, #31
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <setTimer2+0x30>)
 8000e54:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <setTimer2+0x34>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	66666667 	.word	0x66666667
 8000e6c:	200000bc 	.word	0x200000bc
 8000e70:	200000b0 	.word	0x200000b0

08000e74 <setTimer3>:
void setTimer3(int duration){
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/Timer_Cycle;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <setTimer3+0x2c>)
 8000e80:	fb82 1203 	smull	r1, r2, r2, r3
 8000e84:	1092      	asrs	r2, r2, #2
 8000e86:	17db      	asrs	r3, r3, #31
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <setTimer3+0x30>)
 8000e8c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <setTimer3+0x34>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	66666667 	.word	0x66666667
 8000ea4:	200000c0 	.word	0x200000c0
 8000ea8:	200000b4 	.word	0x200000b4

08000eac <timer_run>:
void timer_run(){
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <timer_run+0x6c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	dd0b      	ble.n	8000ed0 <timer_run+0x24>
		timer1_counter--;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <timer_run+0x6c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <timer_run+0x6c>)
 8000ec0:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <timer_run+0x6c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <timer_run+0x24>
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <timer_run+0x70>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <timer_run+0x74>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	dd0b      	ble.n	8000ef0 <timer_run+0x44>
			timer2_counter--;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <timer_run+0x74>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <timer_run+0x74>)
 8000ee0:	6013      	str	r3, [r2, #0]
			if(timer2_counter == 0) timer2_flag = 1;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <timer_run+0x74>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <timer_run+0x44>
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <timer_run+0x78>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
		}
	if(timer3_counter > 0){
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <timer_run+0x7c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dd0b      	ble.n	8000f10 <timer_run+0x64>
				timer3_counter--;
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <timer_run+0x7c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <timer_run+0x7c>)
 8000f00:	6013      	str	r3, [r2, #0]
				if(timer3_counter == 0) timer3_flag = 1;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <timer_run+0x7c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <timer_run+0x64>
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <timer_run+0x80>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
		}
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	200000b8 	.word	0x200000b8
 8000f1c:	200000ac 	.word	0x200000ac
 8000f20:	200000bc 	.word	0x200000bc
 8000f24:	200000b0 	.word	0x200000b0
 8000f28:	200000c0 	.word	0x200000c0
 8000f2c:	200000b4 	.word	0x200000b4

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_MspInit+0x60>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_MspInit+0x60>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000

08000f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa4:	d113      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_TIM_Base_MspInit+0x44>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_TIM_Base_MspInit+0x44>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_TIM_Base_MspInit+0x44>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	201c      	movs	r0, #28
 8000fc4:	f000 fa91 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fc8:	201c      	movs	r0, #28
 8000fca:	f000 faaa 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f000 f96f 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM2_IRQHandler+0x10>)
 8001032:	f001 f8cb 	bl	80021cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000d0 	.word	0x200000d0

08001040 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <setTrafficRed>:
 */

#include "traffic_light.h"
#include "fsm_automatic.h"
void setTrafficRed()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2104      	movs	r1, #4
 8001054:	4807      	ldr	r0, [pc, #28]	; (8001074 <setTrafficRed+0x28>)
 8001056:	f000 fc10 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2110      	movs	r1, #16
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <setTrafficRed+0x28>)
 8001060:	f000 fc0b 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2108      	movs	r1, #8
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <setTrafficRed+0x28>)
 800106a:	f000 fc06 	bl	800187a <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40010800 	.word	0x40010800

08001078 <setTrafficGreen>:
void setTrafficGreen()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2104      	movs	r1, #4
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <setTrafficGreen+0x28>)
 8001082:	f000 fbfa 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2110      	movs	r1, #16
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <setTrafficGreen+0x28>)
 800108c:	f000 fbf5 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2108      	movs	r1, #8
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <setTrafficGreen+0x28>)
 8001096:	f000 fbf0 	bl	800187a <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40010800 	.word	0x40010800

080010a4 <setTrafficYellow>:
void setTrafficYellow()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2104      	movs	r1, #4
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <setTrafficYellow+0x28>)
 80010ae:	f000 fbe4 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2110      	movs	r1, #16
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <setTrafficYellow+0x28>)
 80010b8:	f000 fbdf 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2108      	movs	r1, #8
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <setTrafficYellow+0x28>)
 80010c2:	f000 fbda 	bl	800187a <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40010800 	.word	0x40010800

080010d0 <setTrafficRed1>:
void setTrafficRed1()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2120      	movs	r1, #32
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <setTrafficRed1+0x28>)
 80010da:	f000 fbce 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <setTrafficRed1+0x28>)
 80010e4:	f000 fbc9 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <setTrafficRed1+0x28>)
 80010ee:	f000 fbc4 	bl	800187a <HAL_GPIO_WritePin>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010800 	.word	0x40010800

080010fc <setTrafficGreen1>:
void setTrafficGreen1()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2120      	movs	r1, #32
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <setTrafficGreen1+0x28>)
 8001106:	f000 fbb8 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <setTrafficGreen1+0x28>)
 8001110:	f000 fbb3 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <setTrafficGreen1+0x28>)
 800111a:	f000 fbae 	bl	800187a <HAL_GPIO_WritePin>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40010800 	.word	0x40010800

08001128 <setTrafficYellow1>:
void setTrafficYellow1()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800112c:	2201      	movs	r2, #1
 800112e:	2120      	movs	r1, #32
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <setTrafficYellow1+0x28>)
 8001132:	f000 fba2 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <setTrafficYellow1+0x28>)
 800113c:	f000 fb9d 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <setTrafficYellow1+0x28>)
 8001146:	f000 fb98 	bl	800187a <HAL_GPIO_WritePin>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40010800 	.word	0x40010800

08001154 <setTrafficRedBlink>:
void setTrafficRedBlink()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2110      	movs	r1, #16
 800115c:	480e      	ldr	r0, [pc, #56]	; (8001198 <setTrafficRedBlink+0x44>)
 800115e:	f000 fb8c 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2108      	movs	r1, #8
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <setTrafficRedBlink+0x44>)
 8001168:	f000 fb87 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN1_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <setTrafficRedBlink+0x44>)
 8001172:	f000 fb82 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2140      	movs	r1, #64	; 0x40
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <setTrafficRedBlink+0x44>)
 800117c:	f000 fb7d 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2104      	movs	r1, #4
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <setTrafficRedBlink+0x44>)
 8001186:	f000 fb78 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2120      	movs	r1, #32
 800118e:	4802      	ldr	r0, [pc, #8]	; (8001198 <setTrafficRedBlink+0x44>)
 8001190:	f000 fb73 	bl	800187a <HAL_GPIO_WritePin>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010800 	.word	0x40010800

0800119c <setTrafficYellowBlink>:
void setTrafficYellowBlink()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2110      	movs	r1, #16
 80011a4:	480e      	ldr	r0, [pc, #56]	; (80011e0 <setTrafficYellowBlink+0x44>)
 80011a6:	f000 fb68 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2108      	movs	r1, #8
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <setTrafficYellowBlink+0x44>)
 80011b0:	f000 fb63 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN1_Pin, SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <setTrafficYellowBlink+0x44>)
 80011ba:	f000 fb5e 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW1_Pin, RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2140      	movs	r1, #64	; 0x40
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <setTrafficYellowBlink+0x44>)
 80011c4:	f000 fb59 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2104      	movs	r1, #4
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <setTrafficYellowBlink+0x44>)
 80011ce:	f000 fb54 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2120      	movs	r1, #32
 80011d6:	4802      	ldr	r0, [pc, #8]	; (80011e0 <setTrafficYellowBlink+0x44>)
 80011d8:	f000 fb4f 	bl	800187a <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40010800 	.word	0x40010800

080011e4 <setTrafficGreenBlink>:
void setTrafficGreenBlink()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2110      	movs	r1, #16
 80011ec:	480e      	ldr	r0, [pc, #56]	; (8001228 <setTrafficGreenBlink+0x44>)
 80011ee:	f000 fb44 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2108      	movs	r1, #8
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <setTrafficGreenBlink+0x44>)
 80011f8:	f000 fb3f 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN1_Pin, RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <setTrafficGreenBlink+0x44>)
 8001202:	f000 fb3a 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2140      	movs	r1, #64	; 0x40
 800120a:	4807      	ldr	r0, [pc, #28]	; (8001228 <setTrafficGreenBlink+0x44>)
 800120c:	f000 fb35 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2104      	movs	r1, #4
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <setTrafficGreenBlink+0x44>)
 8001216:	f000 fb30 	bl	800187a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800121a:	2201      	movs	r2, #1
 800121c:	2120      	movs	r1, #32
 800121e:	4802      	ldr	r0, [pc, #8]	; (8001228 <setTrafficGreenBlink+0x44>)
 8001220:	f000 fb2b 	bl	800187a <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010800 	.word	0x40010800

0800122c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800122c:	f7ff ff08 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001232:	490c      	ldr	r1, [pc, #48]	; (8001264 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001248:	4c09      	ldr	r4, [pc, #36]	; (8001270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001256:	f001 faf9 	bl	800284c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125a:	f7ff fcb5 	bl	8000bc8 <main>
  bx lr
 800125e:	4770      	bx	lr
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001268:	080028e8 	.word	0x080028e8
  ldr r2, =_sbss
 800126c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001270:	2000011c 	.word	0x2000011c

08001274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_2_IRQHandler>
	...

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_Init+0x28>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_Init+0x28>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f923 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	200f      	movs	r0, #15
 8001290:	f000 f808 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fe4c 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40022000 	.word	0x40022000

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x54>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x58>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f93b 	bl	800153e <HAL_SYSTICK_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00e      	b.n	80012f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d80a      	bhi.n	80012ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f000 f903 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e4:	4a06      	ldr	r2, [pc, #24]	; (8001300 <HAL_InitTick+0x5c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000044 	.word	0x20000044
 80012fc:	2000004c 	.word	0x2000004c
 8001300:	20000048 	.word	0x20000048

08001304 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x1c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x20>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a03      	ldr	r2, [pc, #12]	; (8001324 <HAL_IncTick+0x20>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	2000004c 	.word	0x2000004c
 8001324:	20000118 	.word	0x20000118

08001328 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b02      	ldr	r3, [pc, #8]	; (8001338 <HAL_GetTick+0x10>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	20000118 	.word	0x20000118

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4906      	ldr	r1, [pc, #24]	; (80013d4 <__NVIC_EnableIRQ+0x34>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f7ff ff90 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff2d 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff42 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff90 	bl	800142c <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5f 	bl	80013d8 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff35 	bl	80013a0 <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffa2 	bl	8001490 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b08b      	sub	sp, #44	; 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156a:	e148      	b.n	80017fe <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800156c:	2201      	movs	r2, #1
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	429a      	cmp	r2, r3
 8001586:	f040 8137 	bne.w	80017f8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4aa3      	ldr	r2, [pc, #652]	; (800181c <HAL_GPIO_Init+0x2c4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d05e      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 8001594:	4aa1      	ldr	r2, [pc, #644]	; (800181c <HAL_GPIO_Init+0x2c4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d875      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 800159a:	4aa1      	ldr	r2, [pc, #644]	; (8001820 <HAL_GPIO_Init+0x2c8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d058      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015a0:	4a9f      	ldr	r2, [pc, #636]	; (8001820 <HAL_GPIO_Init+0x2c8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d86f      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015a6:	4a9f      	ldr	r2, [pc, #636]	; (8001824 <HAL_GPIO_Init+0x2cc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d052      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015ac:	4a9d      	ldr	r2, [pc, #628]	; (8001824 <HAL_GPIO_Init+0x2cc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d869      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015b2:	4a9d      	ldr	r2, [pc, #628]	; (8001828 <HAL_GPIO_Init+0x2d0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d04c      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015b8:	4a9b      	ldr	r2, [pc, #620]	; (8001828 <HAL_GPIO_Init+0x2d0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d863      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015be:	4a9b      	ldr	r2, [pc, #620]	; (800182c <HAL_GPIO_Init+0x2d4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d046      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
 80015c4:	4a99      	ldr	r2, [pc, #612]	; (800182c <HAL_GPIO_Init+0x2d4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d85d      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015ca:	2b12      	cmp	r3, #18
 80015cc:	d82a      	bhi.n	8001624 <HAL_GPIO_Init+0xcc>
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d859      	bhi.n	8001686 <HAL_GPIO_Init+0x12e>
 80015d2:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <HAL_GPIO_Init+0x80>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	08001653 	.word	0x08001653
 80015dc:	0800162d 	.word	0x0800162d
 80015e0:	0800163f 	.word	0x0800163f
 80015e4:	08001681 	.word	0x08001681
 80015e8:	08001687 	.word	0x08001687
 80015ec:	08001687 	.word	0x08001687
 80015f0:	08001687 	.word	0x08001687
 80015f4:	08001687 	.word	0x08001687
 80015f8:	08001687 	.word	0x08001687
 80015fc:	08001687 	.word	0x08001687
 8001600:	08001687 	.word	0x08001687
 8001604:	08001687 	.word	0x08001687
 8001608:	08001687 	.word	0x08001687
 800160c:	08001687 	.word	0x08001687
 8001610:	08001687 	.word	0x08001687
 8001614:	08001687 	.word	0x08001687
 8001618:	08001687 	.word	0x08001687
 800161c:	08001635 	.word	0x08001635
 8001620:	08001649 	.word	0x08001649
 8001624:	4a82      	ldr	r2, [pc, #520]	; (8001830 <HAL_GPIO_Init+0x2d8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800162a:	e02c      	b.n	8001686 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e029      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	3304      	adds	r3, #4
 800163a:	623b      	str	r3, [r7, #32]
          break;
 800163c:	e024      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	3308      	adds	r3, #8
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e01f      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	330c      	adds	r3, #12
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e01a      	b.n	8001688 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165a:	2304      	movs	r3, #4
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e013      	b.n	8001688 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001668:	2308      	movs	r3, #8
 800166a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	611a      	str	r2, [r3, #16]
          break;
 8001672:	e009      	b.n	8001688 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001674:	2308      	movs	r3, #8
 8001676:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	615a      	str	r2, [r3, #20]
          break;
 800167e:	e003      	b.n	8001688 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
          break;
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x130>
          break;
 8001686:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2bff      	cmp	r3, #255	; 0xff
 800168c:	d801      	bhi.n	8001692 <HAL_GPIO_Init+0x13a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	e001      	b.n	8001696 <HAL_GPIO_Init+0x13e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3304      	adds	r3, #4
 8001696:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2bff      	cmp	r3, #255	; 0xff
 800169c:	d802      	bhi.n	80016a4 <HAL_GPIO_Init+0x14c>
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x152>
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	3b08      	subs	r3, #8
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	210f      	movs	r1, #15
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	6a39      	ldr	r1, [r7, #32]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8090 	beq.w	80017f8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d8:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a55      	ldr	r2, [pc, #340]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f0:	4a51      	ldr	r2, [pc, #324]	; (8001838 <HAL_GPIO_Init+0x2e0>)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a49      	ldr	r2, [pc, #292]	; (800183c <HAL_GPIO_Init+0x2e4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00d      	beq.n	8001738 <HAL_GPIO_Init+0x1e0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a48      	ldr	r2, [pc, #288]	; (8001840 <HAL_GPIO_Init+0x2e8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <HAL_GPIO_Init+0x1dc>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a47      	ldr	r2, [pc, #284]	; (8001844 <HAL_GPIO_Init+0x2ec>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_Init+0x1d8>
 800172c:	2302      	movs	r3, #2
 800172e:	e004      	b.n	800173a <HAL_GPIO_Init+0x1e2>
 8001730:	2303      	movs	r3, #3
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x1e2>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_GPIO_Init+0x1e2>
 8001738:	2300      	movs	r3, #0
 800173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173c:	f002 0203 	and.w	r2, r2, #3
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	4093      	lsls	r3, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174a:	493b      	ldr	r1, [pc, #236]	; (8001838 <HAL_GPIO_Init+0x2e0>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001764:	4b38      	ldr	r3, [pc, #224]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	4937      	ldr	r1, [pc, #220]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001772:	4b35      	ldr	r3, [pc, #212]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4933      	ldr	r1, [pc, #204]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800177c:	4013      	ands	r3, r2
 800177e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	492d      	ldr	r1, [pc, #180]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800179a:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4929      	ldr	r1, [pc, #164]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4923      	ldr	r1, [pc, #140]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	491f      	ldr	r1, [pc, #124]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4919      	ldr	r1, [pc, #100]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4915      	ldr	r1, [pc, #84]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	3301      	adds	r3, #1
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	f47f aeaf 	bne.w	800156c <HAL_GPIO_Init+0x14>
  }
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	372c      	adds	r7, #44	; 0x2c
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	10320000 	.word	0x10320000
 8001820:	10310000 	.word	0x10310000
 8001824:	10220000 	.word	0x10220000
 8001828:	10210000 	.word	0x10210000
 800182c:	10120000 	.word	0x10120000
 8001830:	10110000 	.word	0x10110000
 8001834:	40021000 	.word	0x40021000
 8001838:	40010000 	.word	0x40010000
 800183c:	40010800 	.word	0x40010800
 8001840:	40010c00 	.word	0x40010c00
 8001844:	40011000 	.word	0x40011000
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	887b      	ldrh	r3, [r7, #2]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e001      	b.n	800186e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	807b      	strh	r3, [r7, #2]
 8001886:	4613      	mov	r3, r2
 8001888:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800188a:	787b      	ldrb	r3, [r7, #1]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001890:	887a      	ldrh	r2, [r7, #2]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001896:	e003      	b.n	80018a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	041a      	lsls	r2, r3, #16
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	611a      	str	r2, [r3, #16]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018bc:	887a      	ldrh	r2, [r7, #2]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	041a      	lsls	r2, r3, #16
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	400b      	ands	r3, r1
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e26c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8087 	beq.w	8001a0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b04      	cmp	r3, #4
 8001906:	d00c      	beq.n	8001922 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001908:	4b8f      	ldr	r3, [pc, #572]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d112      	bne.n	800193a <HAL_RCC_OscConfig+0x5e>
 8001914:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d10b      	bne.n	800193a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d06c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x12c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d168      	bne.n	8001a08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e246      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x76>
 8001944:	4b80      	ldr	r3, [pc, #512]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a7f      	ldr	r2, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e02e      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x98>
 800195a:	4b7b      	ldr	r3, [pc, #492]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a7a      	ldr	r2, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a77      	ldr	r2, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e01d      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0xbc>
 800197e:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a71      	ldr	r2, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001998:	4b6b      	ldr	r3, [pc, #428]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a6a      	ldr	r2, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800199e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a67      	ldr	r2, [pc, #412]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fcb6 	bl	8001328 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fcb2 	bl	8001328 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1fa      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe4>
 80019de:	e014      	b.n	8001a0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fca2 	bl	8001328 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fc9e 	bl	8001328 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1e6      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x10c>
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d063      	beq.n	8001ade <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a16:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d11c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x18c>
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d116      	bne.n	8001a68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x176>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e1ba      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4939      	ldr	r1, [pc, #228]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	e03a      	b.n	8001ade <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fc57 	bl	8001328 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fc53 	bl	8001328 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e19b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4927      	ldr	r1, [pc, #156]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
 8001ab0:	e015      	b.n	8001ade <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fc36 	bl	8001328 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fc32 	bl	8001328 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e17a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d03a      	beq.n	8001b60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d019      	beq.n	8001b26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fc16 	bl	8001328 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff fc12 	bl	8001328 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e15a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f000 fa9a 	bl	8002058 <RCC_Delay>
 8001b24:	e01c      	b.n	8001b60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fbfc 	bl	8001328 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b32:	e00f      	b.n	8001b54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff fbf8 	bl	8001328 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d908      	bls.n	8001b54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e140      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	42420000 	.word	0x42420000
 8001b50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	4b9e      	ldr	r3, [pc, #632]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e9      	bne.n	8001b34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80a6 	beq.w	8001cba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b72:	4b97      	ldr	r3, [pc, #604]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10d      	bne.n	8001b9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b94      	ldr	r3, [pc, #592]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a93      	ldr	r2, [pc, #588]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b91      	ldr	r3, [pc, #580]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b96:	2301      	movs	r3, #1
 8001b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	4b8e      	ldr	r3, [pc, #568]	; (8001dd4 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d118      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba6:	4b8b      	ldr	r3, [pc, #556]	; (8001dd4 <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a8a      	ldr	r2, [pc, #552]	; (8001dd4 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fbb9 	bl	8001328 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bba:	f7ff fbb5 	bl	8001328 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b64      	cmp	r3, #100	; 0x64
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e0fd      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	4b81      	ldr	r3, [pc, #516]	; (8001dd4 <HAL_RCC_OscConfig+0x4f8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x312>
 8001be0:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4a7a      	ldr	r2, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6213      	str	r3, [r2, #32]
 8001bec:	e02d      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x334>
 8001bf6:	4b76      	ldr	r3, [pc, #472]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a75      	ldr	r2, [pc, #468]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a72      	ldr	r2, [pc, #456]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6213      	str	r3, [r2, #32]
 8001c0e:	e01c      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d10c      	bne.n	8001c32 <HAL_RCC_OscConfig+0x356>
 8001c18:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a6c      	ldr	r2, [pc, #432]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a69      	ldr	r2, [pc, #420]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	e00b      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a63      	ldr	r2, [pc, #396]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d015      	beq.n	8001c7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7ff fb69 	bl	8001328 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7ff fb65 	bl	8001328 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0ab      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ee      	beq.n	8001c5a <HAL_RCC_OscConfig+0x37e>
 8001c7c:	e014      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fb53 	bl	8001328 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7ff fb4f 	bl	8001328 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e095      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1ee      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ca8:	7dfb      	ldrb	r3, [r7, #23]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d105      	bne.n	8001cba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cae:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a47      	ldr	r2, [pc, #284]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8081 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc4:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d061      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d146      	bne.n	8001d66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_RCC_OscConfig+0x4fc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fb23 	bl	8001328 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7ff fb1f 	bl	8001328 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e067      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0c:	d108      	bne.n	8001d20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d0e:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	492d      	ldr	r1, [pc, #180]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a19      	ldr	r1, [r3, #32]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	430b      	orrs	r3, r1
 8001d32:	4927      	ldr	r1, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_OscConfig+0x4fc>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff faf3 	bl	8001328 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff faef 	bl	8001328 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e037      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x46a>
 8001d64:	e02f      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <HAL_RCC_OscConfig+0x4fc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fadc 	bl	8001328 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff fad8 	bl	8001328 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e020      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x498>
 8001d92:	e018      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e013      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	42420060 	.word	0x42420060

08001ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0d0      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0207 	bic.w	r2, r3, #7
 8001e06:	4965      	ldr	r1, [pc, #404]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0b8      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e38:	4b59      	ldr	r3, [pc, #356]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e50:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	494d      	ldr	r1, [pc, #308]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d040      	beq.n	8001efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e07f      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e073      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e06b      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4936      	ldr	r1, [pc, #216]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ecc:	f7ff fa2c 	bl	8001328 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7ff fa28 	bl	8001328 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e053      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 020c 	and.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1eb      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d210      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4922      	ldr	r1, [pc, #136]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e032      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4916      	ldr	r1, [pc, #88]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	490e      	ldr	r1, [pc, #56]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6a:	f000 f821 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	490a      	ldr	r1, [pc, #40]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7c:	5ccb      	ldrb	r3, [r1, r3]
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1d0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f98a 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	080028bc 	.word	0x080028bc
 8001fa8:	20000044 	.word	0x20000044
 8001fac:	20000048 	.word	0x20000048

08001fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d002      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x30>
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fde:	e027      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fe2:	613b      	str	r3, [r7, #16]
      break;
 8001fe4:	e027      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	0c9b      	lsrs	r3, r3, #18
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d010      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_RCC_GetSysClockFreq+0x94>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	0c5b      	lsrs	r3, r3, #17
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_RCC_GetSysClockFreq+0xa0>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <HAL_RCC_GetSysClockFreq+0x98>)
 8002012:	fb02 f203 	mul.w	r2, r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e004      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	613b      	str	r3, [r7, #16]
      break;
 800202e:	e002      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_GetSysClockFreq+0x98>)
 8002032:	613b      	str	r3, [r7, #16]
      break;
 8002034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002036:	693b      	ldr	r3, [r7, #16]
}
 8002038:	4618      	mov	r0, r3
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	007a1200 	.word	0x007a1200
 800204c:	080028cc 	.word	0x080028cc
 8002050:	080028dc 	.word	0x080028dc
 8002054:	003d0900 	.word	0x003d0900

08002058 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <RCC_Delay+0x34>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <RCC_Delay+0x38>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0a5b      	lsrs	r3, r3, #9
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002074:	bf00      	nop
  }
  while (Delay --);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	60fa      	str	r2, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f9      	bne.n	8002074 <RCC_Delay+0x1c>
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	20000044 	.word	0x20000044
 8002090:	10624dd3 	.word	0x10624dd3

08002094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e041      	b.n	800212a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe ff6a 	bl	8000f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f000 fa56 	bl	8002584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d001      	beq.n	800214c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e035      	b.n	80021b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <HAL_TIM_Base_Start_IT+0x90>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_TIM_Base_Start_IT+0x4e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002176:	d004      	beq.n	8002182 <HAL_TIM_Base_Start_IT+0x4e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <HAL_TIM_Base_Start_IT+0x94>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d111      	bne.n	80021a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b06      	cmp	r3, #6
 8002192:	d010      	beq.n	80021b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a4:	e007      	b.n	80021b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40012c00 	.word	0x40012c00
 80021c8:	40000400 	.word	0x40000400

080021cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d020      	beq.n	8002230 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01b      	beq.n	8002230 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0202 	mvn.w	r2, #2
 8002200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f998 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f98b 	bl	800253a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f99a 	bl	800255e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d020      	beq.n	800227c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01b      	beq.n	800227c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0204 	mvn.w	r2, #4
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f972 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f965 	bl	800253a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f974 	bl	800255e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d020      	beq.n	80022c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01b      	beq.n	80022c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0208 	mvn.w	r2, #8
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2204      	movs	r2, #4
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f94c 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f93f 	bl	800253a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f94e 	bl	800255e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d020      	beq.n	8002314 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01b      	beq.n	8002314 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0210 	mvn.w	r2, #16
 80022e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2208      	movs	r2, #8
 80022ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f926 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 8002300:	e005      	b.n	800230e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f919 	bl	800253a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f928 	bl	800255e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00c      	beq.n	8002338 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0201 	mvn.w	r2, #1
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fd50 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00c      	beq.n	800235c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa6f 	bl	800283a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00c      	beq.n	8002380 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8f8 	bl	8002570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00c      	beq.n	80023a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0220 	mvn.w	r2, #32
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa42 	bl	8002828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_TIM_ConfigClockSource+0x1c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e0b4      	b.n	8002532 <HAL_TIM_ConfigClockSource+0x186>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002400:	d03e      	beq.n	8002480 <HAL_TIM_ConfigClockSource+0xd4>
 8002402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002406:	f200 8087 	bhi.w	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 800240a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240e:	f000 8086 	beq.w	800251e <HAL_TIM_ConfigClockSource+0x172>
 8002412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002416:	d87f      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002418:	2b70      	cmp	r3, #112	; 0x70
 800241a:	d01a      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0xa6>
 800241c:	2b70      	cmp	r3, #112	; 0x70
 800241e:	d87b      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002420:	2b60      	cmp	r3, #96	; 0x60
 8002422:	d050      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002424:	2b60      	cmp	r3, #96	; 0x60
 8002426:	d877      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002428:	2b50      	cmp	r3, #80	; 0x50
 800242a:	d03c      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0xfa>
 800242c:	2b50      	cmp	r3, #80	; 0x50
 800242e:	d873      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d058      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d86f      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002438:	2b30      	cmp	r3, #48	; 0x30
 800243a:	d064      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x15a>
 800243c:	2b30      	cmp	r3, #48	; 0x30
 800243e:	d86b      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b20      	cmp	r3, #32
 8002442:	d060      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x15a>
 8002444:	2b20      	cmp	r3, #32
 8002446:	d867      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b00      	cmp	r3, #0
 800244a:	d05c      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x15a>
 800244c:	2b10      	cmp	r3, #16
 800244e:	d05a      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x15a>
 8002450:	e062      	b.n	8002518 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f000 f96a 	bl	800273a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	609a      	str	r2, [r3, #8]
      break;
 800247e:	e04f      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f000 f953 	bl	800273a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a2:	609a      	str	r2, [r3, #8]
      break;
 80024a4:	e03c      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f000 f8ca 	bl	800264c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2150      	movs	r1, #80	; 0x50
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f921 	bl	8002706 <TIM_ITRx_SetConfig>
      break;
 80024c4:	e02c      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f000 f8e8 	bl	80026a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2160      	movs	r1, #96	; 0x60
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f911 	bl	8002706 <TIM_ITRx_SetConfig>
      break;
 80024e4:	e01c      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	461a      	mov	r2, r3
 80024f4:	f000 f8aa 	bl	800264c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2140      	movs	r1, #64	; 0x40
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f901 	bl	8002706 <TIM_ITRx_SetConfig>
      break;
 8002504:	e00c      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4619      	mov	r1, r3
 8002510:	4610      	mov	r0, r2
 8002512:	f000 f8f8 	bl	8002706 <TIM_ITRx_SetConfig>
      break;
 8002516:	e003      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
      break;
 800251c:	e000      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800251e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
	...

08002584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a2b      	ldr	r2, [pc, #172]	; (8002644 <TIM_Base_SetConfig+0xc0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d007      	beq.n	80025ac <TIM_Base_SetConfig+0x28>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d003      	beq.n	80025ac <TIM_Base_SetConfig+0x28>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a28      	ldr	r2, [pc, #160]	; (8002648 <TIM_Base_SetConfig+0xc4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d108      	bne.n	80025be <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a20      	ldr	r2, [pc, #128]	; (8002644 <TIM_Base_SetConfig+0xc0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <TIM_Base_SetConfig+0x52>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025cc:	d003      	beq.n	80025d6 <TIM_Base_SetConfig+0x52>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <TIM_Base_SetConfig+0xc4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d108      	bne.n	80025e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <TIM_Base_SetConfig+0xc0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d103      	bne.n	800261c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f023 0201 	bic.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	611a      	str	r2, [r3, #16]
  }
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40000400 	.word	0x40000400

0800264c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	f023 0201 	bic.w	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f023 030a 	bic.w	r3, r3, #10
 8002688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	621a      	str	r2, [r3, #32]
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f023 0210 	bic.w	r2, r3, #16
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	031b      	lsls	r3, r3, #12
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	621a      	str	r2, [r3, #32]
}
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	f043 0307 	orr.w	r3, r3, #7
 8002728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800273a:	b480      	push	{r7}
 800273c:	b087      	sub	sp, #28
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002754:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	021a      	lsls	r2, r3, #8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	431a      	orrs	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4313      	orrs	r3, r2
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	609a      	str	r2, [r3, #8]
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800278c:	2302      	movs	r3, #2
 800278e:	e041      	b.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a14      	ldr	r2, [pc, #80]	; (8002820 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d009      	beq.n	80027e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027dc:	d004      	beq.n	80027e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a10      	ldr	r2, [pc, #64]	; (8002824 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d10c      	bne.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40000400 	.word	0x40000400

08002828 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <__libc_init_array>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	2600      	movs	r6, #0
 8002850:	4d0c      	ldr	r5, [pc, #48]	; (8002884 <__libc_init_array+0x38>)
 8002852:	4c0d      	ldr	r4, [pc, #52]	; (8002888 <__libc_init_array+0x3c>)
 8002854:	1b64      	subs	r4, r4, r5
 8002856:	10a4      	asrs	r4, r4, #2
 8002858:	42a6      	cmp	r6, r4
 800285a:	d109      	bne.n	8002870 <__libc_init_array+0x24>
 800285c:	f000 f822 	bl	80028a4 <_init>
 8002860:	2600      	movs	r6, #0
 8002862:	4d0a      	ldr	r5, [pc, #40]	; (800288c <__libc_init_array+0x40>)
 8002864:	4c0a      	ldr	r4, [pc, #40]	; (8002890 <__libc_init_array+0x44>)
 8002866:	1b64      	subs	r4, r4, r5
 8002868:	10a4      	asrs	r4, r4, #2
 800286a:	42a6      	cmp	r6, r4
 800286c:	d105      	bne.n	800287a <__libc_init_array+0x2e>
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	f855 3b04 	ldr.w	r3, [r5], #4
 8002874:	4798      	blx	r3
 8002876:	3601      	adds	r6, #1
 8002878:	e7ee      	b.n	8002858 <__libc_init_array+0xc>
 800287a:	f855 3b04 	ldr.w	r3, [r5], #4
 800287e:	4798      	blx	r3
 8002880:	3601      	adds	r6, #1
 8002882:	e7f2      	b.n	800286a <__libc_init_array+0x1e>
 8002884:	080028e0 	.word	0x080028e0
 8002888:	080028e0 	.word	0x080028e0
 800288c:	080028e0 	.word	0x080028e0
 8002890:	080028e4 	.word	0x080028e4

08002894 <memset>:
 8002894:	4603      	mov	r3, r0
 8002896:	4402      	add	r2, r0
 8002898:	4293      	cmp	r3, r2
 800289a:	d100      	bne.n	800289e <memset+0xa>
 800289c:	4770      	bx	lr
 800289e:	f803 1b01 	strb.w	r1, [r3], #1
 80028a2:	e7f9      	b.n	8002898 <memset+0x4>

080028a4 <_init>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr

080028b0 <_fini>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr
